                                                                Макаров Николай
A. Найти значения переменных в формуле 3SAT, при которых наибольшее число
скобок принимают истинное значение.

    NP
Сертификат - Набор переменных (x1, x2 .., xn)
Верификатор - Вычисление значения каждой из скобок КНФ. O(M) , M - количество скобок.

    NP HARD
Для любой постановки задачи ответ >= 1.
Для определения истинности N скобок нам нужно решить в худшем случае M!/((M - N)!N!) 3-SAT задач.
То есть сводим истинность N скобок 3-КНФ форм к конъюнкции этих скобок, что и есть 3-SAT.
Выходит, что для проверки на истинность М скобок мы решим непосредственно 3-SAT. Сведение линейно.

G. Дана матрица A размера M × N из неотрицательных чисел, вектор B размера M из
неотрицательных чисел. Найти бинарный вектор x, такой что Ax ≤ B.

    NP
Сертификат - вектор переменных (x1, x2 .., xn)^T
Верификатор - Перемножение вектора и матрицы и сравнение с другим вектором. О(N*M + M)

    NP HARD

L. Дан взвешенный неориентированный граф G = (V, E), найти в нем гамильтонов
цикл.

    NP
Сертификат - Множество (V, E).
Верификатор - Проверка обходом графа по данному множеству. О(|V| + |E|)

    NP HARD
Сведем к задаче поиск в ориентированном графе. 
Пусть дан ориентированный граф G. Построим по нему неориентированный граф H. Для этого каждой вершине из графа G поставим в соответствие 3 вершины в графе H, соединив в H ребром первую получившуюся со второй, а вторую — с третьей. Для каждой дуги, инцидентной исходной вершине в G поставим в соответствие ребро в H. В случае, если дуга исходит из этой вершины, то соединим ребро с последней из получившихся вершин в H, а если она входит в вершину, то соединим с первой из получившихся. Таким образом, в построенном графе H гамильтонов путь будет тогда и только тогда, когда в исходном графе G будет ориентированный гамильтонов путь.
Так как известно, что задача о поиске гамильтонова цикла в ориентированном графе NP HARD, и сведение, описанное выше, линейно зависит от количества ребер и вершин, то задача NP HARD

M. Дан набор прямоугольников ri и прямоугольник R. Можно ли расположить
прямоугольники ri внутри R так, чтобы они попарно не пересекались и при этом их
стороны были параллельны сторонам R.

    NP
Сертификат - Расположение прямоугольников (r1, r2, .., rn)
Верификатор - Проверка на пересечение и выход за прямоугольник. O(n^2)

    NP HARD

S. Рассмотрим такой алгоритм решения задачи о рюкзаке: отсортируем предметы по
отношению стоимости к весу и будем добавлять в таком порядке, если можно
добавить. Докажите или опровергните, что такой алгоритм дает решение, не более
чем в X раз отличающееся от оптимального.

Рассмотрим случай - (Х - Вместимость, Р - цена)
Предметы:
	Вес	Стоимость
	1	Р + 1          ( P если сортировка не меняет места)
	Х	Р * Х
При выбранном алгоритме отличие будет (Р + 1)/(Р * Х) =>  ~ 1 / X .
Очевидно, что данный случай худший. Поскольку при увеличении кол-ва вещей, которые имееют отношение вес/цена выше чем 1 / Р - числитель будет расти. Пока не будет достигнут лучший случай, где все предметы помещаются в рюкзак или сумма стоимостей вещей с большим отношением больше Р * Х.
Таким образом, алгоритм дает решение, не более чем в X раз отличающееся от оптимального, где Х - вместимость рюкзака.


V. Предложите 2-приближенный алгоритм для решения следующей задачи. Есть n
предметов, вес i-го предмета равен wi. Нужно положить эти предметы в
минимальное число коробок так, чтобы вес каждой коробки был не более S.

Можно упаковывать предметы в произвольном порядке, используя следующее правило. Положим очередной предмет в первый ящик, в который он войдет. Если такого нет, то откроем новый ящик и положим предмет в него

Пусть открыто k ящиков. Следовательно, по крайней мере, k − 1 ящик заполнен хотя бы наполовину. Отсюда, 

sum(w1, w2, .., wn) > (k - 1) / 2

Поскольку сумма размеров предметов является нижней оценкой ( L ) , то выходит, что 2 * L > k - 1 =>  2 * L >= k
ч.т.д.
